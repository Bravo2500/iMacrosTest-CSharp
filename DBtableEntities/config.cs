
/*
'===============================================================================
'  Generated From - MySQL4_CSharp_BusinessEntity.vbgen
'
'  The supporting base class MySql4Entity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace iMacrosPostingDashboard
{
	public abstract class _config : MySql4Entity
	{
		public _config()
		{
			this.QuerySource = "config";
			this.MappingName = "config";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		public override string GetAutoKeyColumns()
		{
			return "Id";
		}
		

		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return this.Query.Load();
		}
	
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Id)
		{
			this.Where.Id.Value = Id;
			
			return this.Query.Load();
		}
		
		
		#region Parameters
		protected class Parameters
		{
			
			public static MySqlParameter Id
			{
				get
				{
					return new MySqlParameter("?Id", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter VariableName
			{
				get
				{
					return new MySqlParameter("?VariableName", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter Value
			{
				get
				{
					return new MySqlParameter("?Value", MySqlDbType.VarChar);

				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Id = "Id";
            public const string VariableName = "VariableName";
            public const string Value = "Value";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Id] = _config.PropertyNames.Id;
					ht[VariableName] = _config.PropertyNames.VariableName;
					ht[Value] = _config.PropertyNames.Value;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Id = "Id";
            public const string VariableName = "VariableName";
            public const string Value = "Value";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Id] = _config.ColumnNames.Id;
					ht[VariableName] = _config.ColumnNames.VariableName;
					ht[Value] = _config.ColumnNames.Value;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Id = "s_Id";
            public const string VariableName = "s_VariableName";
            public const string Value = "s_Value";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Id);
			}
			set
	        {
				base.Setint(ColumnNames.Id, value);
			}
		}

		public virtual string VariableName
	    {
			get
	        {
				return base.Getstring(ColumnNames.VariableName);
			}
			set
	        {
				base.Setstring(ColumnNames.VariableName, value);
			}
		}

		public virtual string Value
	    {
			get
	        {
				return base.Getstring(ColumnNames.Value);
			}
			set
	        {
				base.Setstring(ColumnNames.Value, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Id) ? string.Empty : base.GetintAsString(ColumnNames.Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Id);
				else
					this.Id = base.SetintAsString(ColumnNames.Id, value);
			}
		}

		public virtual string s_VariableName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VariableName) ? string.Empty : base.GetstringAsString(ColumnNames.VariableName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VariableName);
				else
					this.VariableName = base.SetstringAsString(ColumnNames.VariableName, value);
			}
		}

		public virtual string s_Value
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Value) ? string.Empty : base.GetstringAsString(ColumnNames.Value);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Value);
				else
					this.Value = base.SetstringAsString(ColumnNames.Value, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Id, Parameters.Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VariableName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VariableName, Parameters.VariableName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Value
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Value, Parameters.Value);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public WhereParameter VariableName
		    {
				get
		        {
					if(_VariableName_W == null)
	        	    {
						_VariableName_W = TearOff.VariableName;
					}
					return _VariableName_W;
				}
			}

			public WhereParameter Value
		    {
				get
		        {
					if(_Value_W == null)
	        	    {
						_Value_W = TearOff.Value;
					}
					return _Value_W;
				}
			}

			private WhereParameter _Id_W = null;
			private WhereParameter _VariableName_W = null;
			private WhereParameter _Value_W = null;

			public void WhereClauseReset()
			{
				_Id_W = null;
				_VariableName_W = null;
				_Value_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Id, Parameters.Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VariableName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VariableName, Parameters.VariableName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Value
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Value, Parameters.Value);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public AggregateParameter VariableName
		    {
				get
		        {
					if(_VariableName_W == null)
	        	    {
						_VariableName_W = TearOff.VariableName;
					}
					return _VariableName_W;
				}
			}

			public AggregateParameter Value
		    {
				get
		        {
					if(_Value_W == null)
	        	    {
						_Value_W = TearOff.Value;
					}
					return _Value_W;
				}
			}

			private AggregateParameter _Id_W = null;
			private AggregateParameter _VariableName_W = null;
			private AggregateParameter _Value_W = null;

			public void AggregateClauseReset()
			{
				_Id_W = null;
				_VariableName_W = null;
				_Value_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
			
		
		protected override IDbCommand GetInsertCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"INSERT INTO `config`
			(
				`VariableName`,
				`Value`
			)
			VALUES
			(
				?VariableName,
				?Value
			)";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText = 
			@"UPDATE `config` SET 
				`VariableName`=?VariableName,
				`Value`=?Value
			WHERE
				`Id`=?Id";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"DELETE FROM `config` 
			WHERE
				`Id`=?Id";

	
			MySqlParameter p;
			p = cmd.Parameters.Add(Parameters.Id);
			p.SourceColumn = ColumnNames.Id;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(MySqlCommand cmd)
		{
			MySqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Id);
			p.SourceColumn = ColumnNames.Id;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VariableName);
			p.SourceColumn = ColumnNames.VariableName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Value);
			p.SourceColumn = ColumnNames.Value;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}		
		
	
	}
}

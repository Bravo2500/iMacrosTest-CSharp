
/*
'===============================================================================
'  Generated From - MySQL4_CSharp_BusinessEntity.vbgen
'
'  The supporting base class MySql4Entity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace iMacrosPostingDashboard
{
	public abstract class _emailaccounts : MySql4Entity
	{
		public _emailaccounts()
		{
			this.QuerySource = "emailaccounts";
			this.MappingName = "emailaccounts";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		public override string GetAutoKeyColumns()
		{
			return "Id";
		}
		

		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return this.Query.Load();
		}
	
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Id)
		{
			this.Where.Id.Value = Id;
			
			return this.Query.Load();
		}
		
		
		#region Parameters
		protected class Parameters
		{
			
			public static MySqlParameter Id
			{
				get
				{
					return new MySqlParameter("?Id", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter Email
			{
				get
				{
					return new MySqlParameter("?Email", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter Password
			{
				get
				{
					return new MySqlParameter("?Password", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter Username
			{
				get
				{
					return new MySqlParameter("?Username", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter FirstName
			{
				get
				{
					return new MySqlParameter("?FirstName", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter LastName
			{
				get
				{
					return new MySqlParameter("?LastName", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter StreetFR
			{
				get
				{
					return new MySqlParameter("?StreetFR", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter PostalCodeFR
			{
				get
				{
					return new MySqlParameter("?PostalCodeFR", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter PostalCodeDE
			{
				get
				{
					return new MySqlParameter("?PostalCodeDE", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter PostalCodeAU
			{
				get
				{
					return new MySqlParameter("?PostalCodeAU", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter CityFR
			{
				get
				{
					return new MySqlParameter("?CityFR", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter Birthday
			{
				get
				{
					return new MySqlParameter("?Birthday", MySqlDbType.Date);

				}
			}
			
			public static MySqlParameter Allproperties
			{
				get
				{
					return new MySqlParameter("?Allproperties", MySqlDbType.Blob);

				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Id = "Id";
            public const string Email = "Email";
            public const string Password = "Password";
            public const string Username = "Username";
            public const string FirstName = "FirstName";
            public const string LastName = "LastName";
            public const string StreetFR = "StreetFR";
            public const string PostalCodeFR = "PostalCodeFR";
            public const string PostalCodeDE = "PostalCodeDE";
            public const string PostalCodeAU = "PostalCodeAU";
            public const string CityFR = "CityFR";
            public const string Birthday = "Birthday";
            public const string Allproperties = "Allproperties";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Id] = _emailaccounts.PropertyNames.Id;
					ht[Email] = _emailaccounts.PropertyNames.Email;
					ht[Password] = _emailaccounts.PropertyNames.Password;
					ht[Username] = _emailaccounts.PropertyNames.Username;
					ht[FirstName] = _emailaccounts.PropertyNames.FirstName;
					ht[LastName] = _emailaccounts.PropertyNames.LastName;
					ht[StreetFR] = _emailaccounts.PropertyNames.StreetFR;
					ht[PostalCodeFR] = _emailaccounts.PropertyNames.PostalCodeFR;
					ht[PostalCodeDE] = _emailaccounts.PropertyNames.PostalCodeDE;
					ht[PostalCodeAU] = _emailaccounts.PropertyNames.PostalCodeAU;
					ht[CityFR] = _emailaccounts.PropertyNames.CityFR;
					ht[Birthday] = _emailaccounts.PropertyNames.Birthday;
					ht[Allproperties] = _emailaccounts.PropertyNames.Allproperties;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Id = "Id";
            public const string Email = "Email";
            public const string Password = "Password";
            public const string Username = "Username";
            public const string FirstName = "FirstName";
            public const string LastName = "LastName";
            public const string StreetFR = "StreetFR";
            public const string PostalCodeFR = "PostalCodeFR";
            public const string PostalCodeDE = "PostalCodeDE";
            public const string PostalCodeAU = "PostalCodeAU";
            public const string CityFR = "CityFR";
            public const string Birthday = "Birthday";
            public const string Allproperties = "Allproperties";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Id] = _emailaccounts.ColumnNames.Id;
					ht[Email] = _emailaccounts.ColumnNames.Email;
					ht[Password] = _emailaccounts.ColumnNames.Password;
					ht[Username] = _emailaccounts.ColumnNames.Username;
					ht[FirstName] = _emailaccounts.ColumnNames.FirstName;
					ht[LastName] = _emailaccounts.ColumnNames.LastName;
					ht[StreetFR] = _emailaccounts.ColumnNames.StreetFR;
					ht[PostalCodeFR] = _emailaccounts.ColumnNames.PostalCodeFR;
					ht[PostalCodeDE] = _emailaccounts.ColumnNames.PostalCodeDE;
					ht[PostalCodeAU] = _emailaccounts.ColumnNames.PostalCodeAU;
					ht[CityFR] = _emailaccounts.ColumnNames.CityFR;
					ht[Birthday] = _emailaccounts.ColumnNames.Birthday;
					ht[Allproperties] = _emailaccounts.ColumnNames.Allproperties;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Id = "s_Id";
            public const string Email = "s_Email";
            public const string Password = "s_Password";
            public const string Username = "s_Username";
            public const string FirstName = "s_FirstName";
            public const string LastName = "s_LastName";
            public const string StreetFR = "s_StreetFR";
            public const string PostalCodeFR = "s_PostalCodeFR";
            public const string PostalCodeDE = "s_PostalCodeDE";
            public const string PostalCodeAU = "s_PostalCodeAU";
            public const string CityFR = "s_CityFR";
            public const string Birthday = "s_Birthday";
            public const string Allproperties = "s_Allproperties";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Id);
			}
			set
	        {
				base.Setint(ColumnNames.Id, value);
			}
		}

		public virtual string Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Email, value);
			}
		}

		public virtual string Password
	    {
			get
	        {
				return base.Getstring(ColumnNames.Password);
			}
			set
	        {
				base.Setstring(ColumnNames.Password, value);
			}
		}

		public virtual string Username
	    {
			get
	        {
				return base.Getstring(ColumnNames.Username);
			}
			set
	        {
				base.Setstring(ColumnNames.Username, value);
			}
		}

		public virtual string FirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstName, value);
			}
		}

		public virtual string LastName
	    {
			get
	        {
				return base.Getstring(ColumnNames.LastName);
			}
			set
	        {
				base.Setstring(ColumnNames.LastName, value);
			}
		}

		public virtual string StreetFR
	    {
			get
	        {
				return base.Getstring(ColumnNames.StreetFR);
			}
			set
	        {
				base.Setstring(ColumnNames.StreetFR, value);
			}
		}

		public virtual string PostalCodeFR
	    {
			get
	        {
				return base.Getstring(ColumnNames.PostalCodeFR);
			}
			set
	        {
				base.Setstring(ColumnNames.PostalCodeFR, value);
			}
		}

		public virtual string PostalCodeDE
	    {
			get
	        {
				return base.Getstring(ColumnNames.PostalCodeDE);
			}
			set
	        {
				base.Setstring(ColumnNames.PostalCodeDE, value);
			}
		}

		public virtual string PostalCodeAU
	    {
			get
	        {
				return base.Getstring(ColumnNames.PostalCodeAU);
			}
			set
	        {
				base.Setstring(ColumnNames.PostalCodeAU, value);
			}
		}

		public virtual string CityFR
	    {
			get
	        {
				return base.Getstring(ColumnNames.CityFR);
			}
			set
	        {
				base.Setstring(ColumnNames.CityFR, value);
			}
		}

		public virtual DateTime Birthday
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Birthday);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Birthday, value);
			}
		}

		public virtual string Allproperties
	    {
			get
	        {
				return base.Getstring(ColumnNames.Allproperties);
			}
			set
	        {
				base.Setstring(ColumnNames.Allproperties, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Id) ? string.Empty : base.GetintAsString(ColumnNames.Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Id);
				else
					this.Id = base.SetintAsString(ColumnNames.Id, value);
			}
		}

		public virtual string s_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Email) ? string.Empty : base.GetstringAsString(ColumnNames.Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Email);
				else
					this.Email = base.SetstringAsString(ColumnNames.Email, value);
			}
		}

		public virtual string s_Password
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Password) ? string.Empty : base.GetstringAsString(ColumnNames.Password);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Password);
				else
					this.Password = base.SetstringAsString(ColumnNames.Password, value);
			}
		}

		public virtual string s_Username
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Username) ? string.Empty : base.GetstringAsString(ColumnNames.Username);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Username);
				else
					this.Username = base.SetstringAsString(ColumnNames.Username, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstName);
				else
					this.FirstName = base.SetstringAsString(ColumnNames.FirstName, value);
			}
		}

		public virtual string s_LastName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastName) ? string.Empty : base.GetstringAsString(ColumnNames.LastName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastName);
				else
					this.LastName = base.SetstringAsString(ColumnNames.LastName, value);
			}
		}

		public virtual string s_StreetFR
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StreetFR) ? string.Empty : base.GetstringAsString(ColumnNames.StreetFR);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StreetFR);
				else
					this.StreetFR = base.SetstringAsString(ColumnNames.StreetFR, value);
			}
		}

		public virtual string s_PostalCodeFR
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PostalCodeFR) ? string.Empty : base.GetstringAsString(ColumnNames.PostalCodeFR);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PostalCodeFR);
				else
					this.PostalCodeFR = base.SetstringAsString(ColumnNames.PostalCodeFR, value);
			}
		}

		public virtual string s_PostalCodeDE
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PostalCodeDE) ? string.Empty : base.GetstringAsString(ColumnNames.PostalCodeDE);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PostalCodeDE);
				else
					this.PostalCodeDE = base.SetstringAsString(ColumnNames.PostalCodeDE, value);
			}
		}

		public virtual string s_PostalCodeAU
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PostalCodeAU) ? string.Empty : base.GetstringAsString(ColumnNames.PostalCodeAU);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PostalCodeAU);
				else
					this.PostalCodeAU = base.SetstringAsString(ColumnNames.PostalCodeAU, value);
			}
		}

		public virtual string s_CityFR
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CityFR) ? string.Empty : base.GetstringAsString(ColumnNames.CityFR);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CityFR);
				else
					this.CityFR = base.SetstringAsString(ColumnNames.CityFR, value);
			}
		}

		public virtual string s_Birthday
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Birthday) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Birthday);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Birthday);
				else
					this.Birthday = base.SetDateTimeAsString(ColumnNames.Birthday, value);
			}
		}

		public virtual string s_Allproperties
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Allproperties) ? string.Empty : base.GetstringAsString(ColumnNames.Allproperties);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Allproperties);
				else
					this.Allproperties = base.SetstringAsString(ColumnNames.Allproperties, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Id, Parameters.Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Password
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Username
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Username, Parameters.Username);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StreetFR
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StreetFR, Parameters.StreetFR);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PostalCodeFR
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PostalCodeFR, Parameters.PostalCodeFR);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PostalCodeDE
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PostalCodeDE, Parameters.PostalCodeDE);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PostalCodeAU
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PostalCodeAU, Parameters.PostalCodeAU);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CityFR
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CityFR, Parameters.CityFR);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Birthday
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Birthday, Parameters.Birthday);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Allproperties
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Allproperties, Parameters.Allproperties);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public WhereParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public WhereParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public WhereParameter Username
		    {
				get
		        {
					if(_Username_W == null)
	        	    {
						_Username_W = TearOff.Username;
					}
					return _Username_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public WhereParameter StreetFR
		    {
				get
		        {
					if(_StreetFR_W == null)
	        	    {
						_StreetFR_W = TearOff.StreetFR;
					}
					return _StreetFR_W;
				}
			}

			public WhereParameter PostalCodeFR
		    {
				get
		        {
					if(_PostalCodeFR_W == null)
	        	    {
						_PostalCodeFR_W = TearOff.PostalCodeFR;
					}
					return _PostalCodeFR_W;
				}
			}

			public WhereParameter PostalCodeDE
		    {
				get
		        {
					if(_PostalCodeDE_W == null)
	        	    {
						_PostalCodeDE_W = TearOff.PostalCodeDE;
					}
					return _PostalCodeDE_W;
				}
			}

			public WhereParameter PostalCodeAU
		    {
				get
		        {
					if(_PostalCodeAU_W == null)
	        	    {
						_PostalCodeAU_W = TearOff.PostalCodeAU;
					}
					return _PostalCodeAU_W;
				}
			}

			public WhereParameter CityFR
		    {
				get
		        {
					if(_CityFR_W == null)
	        	    {
						_CityFR_W = TearOff.CityFR;
					}
					return _CityFR_W;
				}
			}

			public WhereParameter Birthday
		    {
				get
		        {
					if(_Birthday_W == null)
	        	    {
						_Birthday_W = TearOff.Birthday;
					}
					return _Birthday_W;
				}
			}

			public WhereParameter Allproperties
		    {
				get
		        {
					if(_Allproperties_W == null)
	        	    {
						_Allproperties_W = TearOff.Allproperties;
					}
					return _Allproperties_W;
				}
			}

			private WhereParameter _Id_W = null;
			private WhereParameter _Email_W = null;
			private WhereParameter _Password_W = null;
			private WhereParameter _Username_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _LastName_W = null;
			private WhereParameter _StreetFR_W = null;
			private WhereParameter _PostalCodeFR_W = null;
			private WhereParameter _PostalCodeDE_W = null;
			private WhereParameter _PostalCodeAU_W = null;
			private WhereParameter _CityFR_W = null;
			private WhereParameter _Birthday_W = null;
			private WhereParameter _Allproperties_W = null;

			public void WhereClauseReset()
			{
				_Id_W = null;
				_Email_W = null;
				_Password_W = null;
				_Username_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_StreetFR_W = null;
				_PostalCodeFR_W = null;
				_PostalCodeDE_W = null;
				_PostalCodeAU_W = null;
				_CityFR_W = null;
				_Birthday_W = null;
				_Allproperties_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Id, Parameters.Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Password
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Username
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Username, Parameters.Username);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StreetFR
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StreetFR, Parameters.StreetFR);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PostalCodeFR
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PostalCodeFR, Parameters.PostalCodeFR);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PostalCodeDE
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PostalCodeDE, Parameters.PostalCodeDE);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PostalCodeAU
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PostalCodeAU, Parameters.PostalCodeAU);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CityFR
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CityFR, Parameters.CityFR);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Birthday
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Birthday, Parameters.Birthday);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Allproperties
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Allproperties, Parameters.Allproperties);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public AggregateParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public AggregateParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public AggregateParameter Username
		    {
				get
		        {
					if(_Username_W == null)
	        	    {
						_Username_W = TearOff.Username;
					}
					return _Username_W;
				}
			}

			public AggregateParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public AggregateParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public AggregateParameter StreetFR
		    {
				get
		        {
					if(_StreetFR_W == null)
	        	    {
						_StreetFR_W = TearOff.StreetFR;
					}
					return _StreetFR_W;
				}
			}

			public AggregateParameter PostalCodeFR
		    {
				get
		        {
					if(_PostalCodeFR_W == null)
	        	    {
						_PostalCodeFR_W = TearOff.PostalCodeFR;
					}
					return _PostalCodeFR_W;
				}
			}

			public AggregateParameter PostalCodeDE
		    {
				get
		        {
					if(_PostalCodeDE_W == null)
	        	    {
						_PostalCodeDE_W = TearOff.PostalCodeDE;
					}
					return _PostalCodeDE_W;
				}
			}

			public AggregateParameter PostalCodeAU
		    {
				get
		        {
					if(_PostalCodeAU_W == null)
	        	    {
						_PostalCodeAU_W = TearOff.PostalCodeAU;
					}
					return _PostalCodeAU_W;
				}
			}

			public AggregateParameter CityFR
		    {
				get
		        {
					if(_CityFR_W == null)
	        	    {
						_CityFR_W = TearOff.CityFR;
					}
					return _CityFR_W;
				}
			}

			public AggregateParameter Birthday
		    {
				get
		        {
					if(_Birthday_W == null)
	        	    {
						_Birthday_W = TearOff.Birthday;
					}
					return _Birthday_W;
				}
			}

			public AggregateParameter Allproperties
		    {
				get
		        {
					if(_Allproperties_W == null)
	        	    {
						_Allproperties_W = TearOff.Allproperties;
					}
					return _Allproperties_W;
				}
			}

			private AggregateParameter _Id_W = null;
			private AggregateParameter _Email_W = null;
			private AggregateParameter _Password_W = null;
			private AggregateParameter _Username_W = null;
			private AggregateParameter _FirstName_W = null;
			private AggregateParameter _LastName_W = null;
			private AggregateParameter _StreetFR_W = null;
			private AggregateParameter _PostalCodeFR_W = null;
			private AggregateParameter _PostalCodeDE_W = null;
			private AggregateParameter _PostalCodeAU_W = null;
			private AggregateParameter _CityFR_W = null;
			private AggregateParameter _Birthday_W = null;
			private AggregateParameter _Allproperties_W = null;

			public void AggregateClauseReset()
			{
				_Id_W = null;
				_Email_W = null;
				_Password_W = null;
				_Username_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_StreetFR_W = null;
				_PostalCodeFR_W = null;
				_PostalCodeDE_W = null;
				_PostalCodeAU_W = null;
				_CityFR_W = null;
				_Birthday_W = null;
				_Allproperties_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
			
		
		protected override IDbCommand GetInsertCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"INSERT INTO `emailaccounts`
			(
				`Email`,
				`Password`,
				`Username`,
				`FirstName`,
				`LastName`,
				`StreetFR`,
				`PostalCodeFR`,
				`PostalCodeDE`,
				`PostalCodeAU`,
				`CityFR`,
				`Birthday`,
				`Allproperties`
			)
			VALUES
			(
				?Email,
				?Password,
				?Username,
				?FirstName,
				?LastName,
				?StreetFR,
				?PostalCodeFR,
				?PostalCodeDE,
				?PostalCodeAU,
				?CityFR,
				?Birthday,
				?Allproperties
			)";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText = 
			@"UPDATE `emailaccounts` SET 
				`Email`=?Email,
				`Password`=?Password,
				`Username`=?Username,
				`FirstName`=?FirstName,
				`LastName`=?LastName,
				`StreetFR`=?StreetFR,
				`PostalCodeFR`=?PostalCodeFR,
				`PostalCodeDE`=?PostalCodeDE,
				`PostalCodeAU`=?PostalCodeAU,
				`CityFR`=?CityFR,
				`Birthday`=?Birthday,
				`Allproperties`=?Allproperties
			WHERE
				`Id`=?Id";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"DELETE FROM `emailaccounts` 
			WHERE
				`Id`=?Id";

	
			MySqlParameter p;
			p = cmd.Parameters.Add(Parameters.Id);
			p.SourceColumn = ColumnNames.Id;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(MySqlCommand cmd)
		{
			MySqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Id);
			p.SourceColumn = ColumnNames.Id;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Email);
			p.SourceColumn = ColumnNames.Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Password);
			p.SourceColumn = ColumnNames.Password;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Username);
			p.SourceColumn = ColumnNames.Username;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstName);
			p.SourceColumn = ColumnNames.FirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastName);
			p.SourceColumn = ColumnNames.LastName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StreetFR);
			p.SourceColumn = ColumnNames.StreetFR;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PostalCodeFR);
			p.SourceColumn = ColumnNames.PostalCodeFR;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PostalCodeDE);
			p.SourceColumn = ColumnNames.PostalCodeDE;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PostalCodeAU);
			p.SourceColumn = ColumnNames.PostalCodeAU;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CityFR);
			p.SourceColumn = ColumnNames.CityFR;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Birthday);
			p.SourceColumn = ColumnNames.Birthday;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Allproperties);
			p.SourceColumn = ColumnNames.Allproperties;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}		
		
	
	}
}

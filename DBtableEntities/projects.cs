
/*
'===============================================================================
'  Generated From - MySQL4_CSharp_BusinessEntity.vbgen
'
'  The supporting base class MySql4Entity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace iMacrosPostingDashboard
{
	public abstract class _projects : MySql4Entity
	{
		public _projects()
		{
			this.QuerySource = "projects";
			this.MappingName = "projects";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		public override string GetAutoKeyColumns()
		{
			return "Id";
		}
		

		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return this.Query.Load();
		}
	
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Id)
		{
			this.Where.Id.Value = Id;
			
			return this.Query.Load();
		}
		
		
		#region Parameters
		protected class Parameters
		{
			
			public static MySqlParameter Id
			{
				get
				{
					return new MySqlParameter("?Id", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter ProjectName
			{
				get
				{
					return new MySqlParameter("?ProjectName", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter Website
			{
				get
				{
					return new MySqlParameter("?Website", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter LastAccountUsed
			{
				get
				{
					return new MySqlParameter("?LastAccountUsed", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter LastTopicUsed
			{
				get
				{
					return new MySqlParameter("?LastTopicUsed", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter LastTemplateUsed
			{
				get
				{
					return new MySqlParameter("?LastTemplateUsed", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter LastProxyUsed
			{
				get
				{
					return new MySqlParameter("?LastProxyUsed", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter ImacrosCodeGeneric
			{
				get
				{
					return new MySqlParameter("?ImacrosCodeGeneric", MySqlDbType.Blob);

				}
			}
			
			public static MySqlParameter ImacrosCreateAccCode
			{
				get
				{
					return new MySqlParameter("?ImacrosCreateAccCode", MySqlDbType.Blob);

				}
			}
			
			public static MySqlParameter ImacrosLoginPost
			{
				get
				{
					return new MySqlParameter("?ImacrosLoginPost", MySqlDbType.Blob);

				}
			}
			
			public static MySqlParameter Linkstructure
			{
				get
				{
					return new MySqlParameter("?Linkstructure", MySqlDbType.Blob);

				}
			}
			
			public static MySqlParameter Senderemail
			{
				get
				{
					return new MySqlParameter("?Senderemail", MySqlDbType.Blob);

				}
			}
			
			public static MySqlParameter TopicsTable
			{
				get
				{
					return new MySqlParameter("?TopicsTable", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter AnswerTemplate
			{
				get
				{
					return new MySqlParameter("?AnswerTemplate", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter ShiftLinkstructureBy
			{
				get
				{
					return new MySqlParameter("?ShiftLinkstructureBy", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter Pausebeforeconfirm
			{
				get
				{
					return new MySqlParameter("?Pausebeforeconfirm", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter Pausebeforenextpost
			{
				get
				{
					return new MySqlParameter("?Pausebeforenextpost", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter PostQnA
			{
				get
				{
					return new MySqlParameter("?PostQnA", MySqlDbType.Byte);

				}
			}
			
			public static MySqlParameter Language
			{
				get
				{
					return new MySqlParameter("?Language", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter Properties
			{
				get
				{
					return new MySqlParameter("?Properties", MySqlDbType.Blob);

				}
			}
			
			public static MySqlParameter ProjectStatus
			{
				get
				{
					return new MySqlParameter("?ProjectStatus", MySqlDbType.Blob);

				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Id = "Id";
            public const string ProjectName = "ProjectName";
            public const string Website = "Website";
            public const string LastAccountUsed = "LastAccountUsed";
            public const string LastTopicUsed = "LastTopicUsed";
            public const string LastTemplateUsed = "LastTemplateUsed";
            public const string LastProxyUsed = "LastProxyUsed";
            public const string ImacrosCodeGeneric = "ImacrosCodeGeneric";
            public const string ImacrosCreateAccCode = "ImacrosCreateAccCode";
            public const string ImacrosLoginPost = "ImacrosLoginPost";
            public const string Linkstructure = "Linkstructure";
            public const string Senderemail = "Senderemail";
            public const string TopicsTable = "TopicsTable";
            public const string AnswerTemplate = "AnswerTemplate";
            public const string ShiftLinkstructureBy = "ShiftLinkstructureBy";
            public const string Pausebeforeconfirm = "Pausebeforeconfirm";
            public const string Pausebeforenextpost = "Pausebeforenextpost";
            public const string PostQnA = "PostQnA";
            public const string Language = "Language";
            public const string Properties = "Properties";
            public const string ProjectStatus = "ProjectStatus";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Id] = _projects.PropertyNames.Id;
					ht[ProjectName] = _projects.PropertyNames.ProjectName;
					ht[Website] = _projects.PropertyNames.Website;
					ht[LastAccountUsed] = _projects.PropertyNames.LastAccountUsed;
					ht[LastTopicUsed] = _projects.PropertyNames.LastTopicUsed;
					ht[LastTemplateUsed] = _projects.PropertyNames.LastTemplateUsed;
					ht[LastProxyUsed] = _projects.PropertyNames.LastProxyUsed;
					ht[ImacrosCodeGeneric] = _projects.PropertyNames.ImacrosCodeGeneric;
					ht[ImacrosCreateAccCode] = _projects.PropertyNames.ImacrosCreateAccCode;
					ht[ImacrosLoginPost] = _projects.PropertyNames.ImacrosLoginPost;
					ht[Linkstructure] = _projects.PropertyNames.Linkstructure;
					ht[Senderemail] = _projects.PropertyNames.Senderemail;
					ht[TopicsTable] = _projects.PropertyNames.TopicsTable;
					ht[AnswerTemplate] = _projects.PropertyNames.AnswerTemplate;
					ht[ShiftLinkstructureBy] = _projects.PropertyNames.ShiftLinkstructureBy;
					ht[Pausebeforeconfirm] = _projects.PropertyNames.Pausebeforeconfirm;
					ht[Pausebeforenextpost] = _projects.PropertyNames.Pausebeforenextpost;
					ht[PostQnA] = _projects.PropertyNames.PostQnA;
					ht[Language] = _projects.PropertyNames.Language;
					ht[Properties] = _projects.PropertyNames.Properties;
					ht[ProjectStatus] = _projects.PropertyNames.ProjectStatus;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Id = "Id";
            public const string ProjectName = "ProjectName";
            public const string Website = "Website";
            public const string LastAccountUsed = "LastAccountUsed";
            public const string LastTopicUsed = "LastTopicUsed";
            public const string LastTemplateUsed = "LastTemplateUsed";
            public const string LastProxyUsed = "LastProxyUsed";
            public const string ImacrosCodeGeneric = "ImacrosCodeGeneric";
            public const string ImacrosCreateAccCode = "ImacrosCreateAccCode";
            public const string ImacrosLoginPost = "ImacrosLoginPost";
            public const string Linkstructure = "Linkstructure";
            public const string Senderemail = "Senderemail";
            public const string TopicsTable = "TopicsTable";
            public const string AnswerTemplate = "AnswerTemplate";
            public const string ShiftLinkstructureBy = "ShiftLinkstructureBy";
            public const string Pausebeforeconfirm = "Pausebeforeconfirm";
            public const string Pausebeforenextpost = "Pausebeforenextpost";
            public const string PostQnA = "PostQnA";
            public const string Language = "Language";
            public const string Properties = "Properties";
            public const string ProjectStatus = "ProjectStatus";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Id] = _projects.ColumnNames.Id;
					ht[ProjectName] = _projects.ColumnNames.ProjectName;
					ht[Website] = _projects.ColumnNames.Website;
					ht[LastAccountUsed] = _projects.ColumnNames.LastAccountUsed;
					ht[LastTopicUsed] = _projects.ColumnNames.LastTopicUsed;
					ht[LastTemplateUsed] = _projects.ColumnNames.LastTemplateUsed;
					ht[LastProxyUsed] = _projects.ColumnNames.LastProxyUsed;
					ht[ImacrosCodeGeneric] = _projects.ColumnNames.ImacrosCodeGeneric;
					ht[ImacrosCreateAccCode] = _projects.ColumnNames.ImacrosCreateAccCode;
					ht[ImacrosLoginPost] = _projects.ColumnNames.ImacrosLoginPost;
					ht[Linkstructure] = _projects.ColumnNames.Linkstructure;
					ht[Senderemail] = _projects.ColumnNames.Senderemail;
					ht[TopicsTable] = _projects.ColumnNames.TopicsTable;
					ht[AnswerTemplate] = _projects.ColumnNames.AnswerTemplate;
					ht[ShiftLinkstructureBy] = _projects.ColumnNames.ShiftLinkstructureBy;
					ht[Pausebeforeconfirm] = _projects.ColumnNames.Pausebeforeconfirm;
					ht[Pausebeforenextpost] = _projects.ColumnNames.Pausebeforenextpost;
					ht[PostQnA] = _projects.ColumnNames.PostQnA;
					ht[Language] = _projects.ColumnNames.Language;
					ht[Properties] = _projects.ColumnNames.Properties;
					ht[ProjectStatus] = _projects.ColumnNames.ProjectStatus;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Id = "s_Id";
            public const string ProjectName = "s_ProjectName";
            public const string Website = "s_Website";
            public const string LastAccountUsed = "s_LastAccountUsed";
            public const string LastTopicUsed = "s_LastTopicUsed";
            public const string LastTemplateUsed = "s_LastTemplateUsed";
            public const string LastProxyUsed = "s_LastProxyUsed";
            public const string ImacrosCodeGeneric = "s_ImacrosCodeGeneric";
            public const string ImacrosCreateAccCode = "s_ImacrosCreateAccCode";
            public const string ImacrosLoginPost = "s_ImacrosLoginPost";
            public const string Linkstructure = "s_Linkstructure";
            public const string Senderemail = "s_Senderemail";
            public const string TopicsTable = "s_TopicsTable";
            public const string AnswerTemplate = "s_AnswerTemplate";
            public const string ShiftLinkstructureBy = "s_ShiftLinkstructureBy";
            public const string Pausebeforeconfirm = "s_Pausebeforeconfirm";
            public const string Pausebeforenextpost = "s_Pausebeforenextpost";
            public const string PostQnA = "s_PostQnA";
            public const string Language = "s_Language";
            public const string Properties = "s_Properties";
            public const string ProjectStatus = "s_ProjectStatus";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Id);
			}
			set
	        {
				base.Setint(ColumnNames.Id, value);
			}
		}

		public virtual string ProjectName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ProjectName);
			}
			set
	        {
				base.Setstring(ColumnNames.ProjectName, value);
			}
		}

		public virtual string Website
	    {
			get
	        {
				return base.Getstring(ColumnNames.Website);
			}
			set
	        {
				base.Setstring(ColumnNames.Website, value);
			}
		}

		public virtual int LastAccountUsed
	    {
			get
	        {
				return base.Getint(ColumnNames.LastAccountUsed);
			}
			set
	        {
				base.Setint(ColumnNames.LastAccountUsed, value);
			}
		}

		public virtual int LastTopicUsed
	    {
			get
	        {
				return base.Getint(ColumnNames.LastTopicUsed);
			}
			set
	        {
				base.Setint(ColumnNames.LastTopicUsed, value);
			}
		}

		public virtual int LastTemplateUsed
	    {
			get
	        {
				return base.Getint(ColumnNames.LastTemplateUsed);
			}
			set
	        {
				base.Setint(ColumnNames.LastTemplateUsed, value);
			}
		}

		public virtual int LastProxyUsed
	    {
			get
	        {
				return base.Getint(ColumnNames.LastProxyUsed);
			}
			set
	        {
				base.Setint(ColumnNames.LastProxyUsed, value);
			}
		}

		public virtual string ImacrosCodeGeneric
	    {
			get
	        {
				return base.Getstring(ColumnNames.ImacrosCodeGeneric);
			}
			set
	        {
				base.Setstring(ColumnNames.ImacrosCodeGeneric, value);
			}
		}

		public virtual string ImacrosCreateAccCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.ImacrosCreateAccCode);
			}
			set
	        {
				base.Setstring(ColumnNames.ImacrosCreateAccCode, value);
			}
		}

		public virtual string ImacrosLoginPost
	    {
			get
	        {
				return base.Getstring(ColumnNames.ImacrosLoginPost);
			}
			set
	        {
				base.Setstring(ColumnNames.ImacrosLoginPost, value);
			}
		}

		public virtual string Linkstructure
	    {
			get
	        {
				return base.Getstring(ColumnNames.Linkstructure);
			}
			set
	        {
				base.Setstring(ColumnNames.Linkstructure, value);
			}
		}

		public virtual string Senderemail
	    {
			get
	        {
				return base.Getstring(ColumnNames.Senderemail);
			}
			set
	        {
				base.Setstring(ColumnNames.Senderemail, value);
			}
		}

		public virtual string TopicsTable
	    {
			get
	        {
				return base.Getstring(ColumnNames.TopicsTable);
			}
			set
	        {
				base.Setstring(ColumnNames.TopicsTable, value);
			}
		}

		public virtual string AnswerTemplate
	    {
			get
	        {
				return base.Getstring(ColumnNames.AnswerTemplate);
			}
			set
	        {
				base.Setstring(ColumnNames.AnswerTemplate, value);
			}
		}

		public virtual int ShiftLinkstructureBy
	    {
			get
	        {
				return base.Getint(ColumnNames.ShiftLinkstructureBy);
			}
			set
	        {
				base.Setint(ColumnNames.ShiftLinkstructureBy, value);
			}
		}

		public virtual int Pausebeforeconfirm
	    {
			get
	        {
				return base.Getint(ColumnNames.Pausebeforeconfirm);
			}
			set
	        {
				base.Setint(ColumnNames.Pausebeforeconfirm, value);
			}
		}

		public virtual int Pausebeforenextpost
	    {
			get
	        {
				return base.Getint(ColumnNames.Pausebeforenextpost);
			}
			set
	        {
				base.Setint(ColumnNames.Pausebeforenextpost, value);
			}
		}

		public virtual sbyte PostQnA
	    {
			get
	        {
				return base.Getsbyte(ColumnNames.PostQnA);
			}
			set
	        {
				base.Setsbyte(ColumnNames.PostQnA, value);
			}
		}

		public virtual string Language
	    {
			get
	        {
				return base.Getstring(ColumnNames.Language);
			}
			set
	        {
				base.Setstring(ColumnNames.Language, value);
			}
		}

		public virtual string Properties
	    {
			get
	        {
				return base.Getstring(ColumnNames.Properties);
			}
			set
	        {
				base.Setstring(ColumnNames.Properties, value);
			}
		}

		public virtual string ProjectStatus
	    {
			get
	        {
				return base.Getstring(ColumnNames.ProjectStatus);
			}
			set
	        {
				base.Setstring(ColumnNames.ProjectStatus, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Id) ? string.Empty : base.GetintAsString(ColumnNames.Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Id);
				else
					this.Id = base.SetintAsString(ColumnNames.Id, value);
			}
		}

		public virtual string s_ProjectName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProjectName) ? string.Empty : base.GetstringAsString(ColumnNames.ProjectName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProjectName);
				else
					this.ProjectName = base.SetstringAsString(ColumnNames.ProjectName, value);
			}
		}

		public virtual string s_Website
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Website) ? string.Empty : base.GetstringAsString(ColumnNames.Website);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Website);
				else
					this.Website = base.SetstringAsString(ColumnNames.Website, value);
			}
		}

		public virtual string s_LastAccountUsed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastAccountUsed) ? string.Empty : base.GetintAsString(ColumnNames.LastAccountUsed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastAccountUsed);
				else
					this.LastAccountUsed = base.SetintAsString(ColumnNames.LastAccountUsed, value);
			}
		}

		public virtual string s_LastTopicUsed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastTopicUsed) ? string.Empty : base.GetintAsString(ColumnNames.LastTopicUsed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastTopicUsed);
				else
					this.LastTopicUsed = base.SetintAsString(ColumnNames.LastTopicUsed, value);
			}
		}

		public virtual string s_LastTemplateUsed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastTemplateUsed) ? string.Empty : base.GetintAsString(ColumnNames.LastTemplateUsed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastTemplateUsed);
				else
					this.LastTemplateUsed = base.SetintAsString(ColumnNames.LastTemplateUsed, value);
			}
		}

		public virtual string s_LastProxyUsed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastProxyUsed) ? string.Empty : base.GetintAsString(ColumnNames.LastProxyUsed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastProxyUsed);
				else
					this.LastProxyUsed = base.SetintAsString(ColumnNames.LastProxyUsed, value);
			}
		}

		public virtual string s_ImacrosCodeGeneric
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ImacrosCodeGeneric) ? string.Empty : base.GetstringAsString(ColumnNames.ImacrosCodeGeneric);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ImacrosCodeGeneric);
				else
					this.ImacrosCodeGeneric = base.SetstringAsString(ColumnNames.ImacrosCodeGeneric, value);
			}
		}

		public virtual string s_ImacrosCreateAccCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ImacrosCreateAccCode) ? string.Empty : base.GetstringAsString(ColumnNames.ImacrosCreateAccCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ImacrosCreateAccCode);
				else
					this.ImacrosCreateAccCode = base.SetstringAsString(ColumnNames.ImacrosCreateAccCode, value);
			}
		}

		public virtual string s_ImacrosLoginPost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ImacrosLoginPost) ? string.Empty : base.GetstringAsString(ColumnNames.ImacrosLoginPost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ImacrosLoginPost);
				else
					this.ImacrosLoginPost = base.SetstringAsString(ColumnNames.ImacrosLoginPost, value);
			}
		}

		public virtual string s_Linkstructure
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Linkstructure) ? string.Empty : base.GetstringAsString(ColumnNames.Linkstructure);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Linkstructure);
				else
					this.Linkstructure = base.SetstringAsString(ColumnNames.Linkstructure, value);
			}
		}

		public virtual string s_Senderemail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Senderemail) ? string.Empty : base.GetstringAsString(ColumnNames.Senderemail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Senderemail);
				else
					this.Senderemail = base.SetstringAsString(ColumnNames.Senderemail, value);
			}
		}

		public virtual string s_TopicsTable
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TopicsTable) ? string.Empty : base.GetstringAsString(ColumnNames.TopicsTable);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TopicsTable);
				else
					this.TopicsTable = base.SetstringAsString(ColumnNames.TopicsTable, value);
			}
		}

		public virtual string s_AnswerTemplate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AnswerTemplate) ? string.Empty : base.GetstringAsString(ColumnNames.AnswerTemplate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AnswerTemplate);
				else
					this.AnswerTemplate = base.SetstringAsString(ColumnNames.AnswerTemplate, value);
			}
		}

		public virtual string s_ShiftLinkstructureBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShiftLinkstructureBy) ? string.Empty : base.GetintAsString(ColumnNames.ShiftLinkstructureBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShiftLinkstructureBy);
				else
					this.ShiftLinkstructureBy = base.SetintAsString(ColumnNames.ShiftLinkstructureBy, value);
			}
		}

		public virtual string s_Pausebeforeconfirm
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pausebeforeconfirm) ? string.Empty : base.GetintAsString(ColumnNames.Pausebeforeconfirm);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pausebeforeconfirm);
				else
					this.Pausebeforeconfirm = base.SetintAsString(ColumnNames.Pausebeforeconfirm, value);
			}
		}

		public virtual string s_Pausebeforenextpost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pausebeforenextpost) ? string.Empty : base.GetintAsString(ColumnNames.Pausebeforenextpost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pausebeforenextpost);
				else
					this.Pausebeforenextpost = base.SetintAsString(ColumnNames.Pausebeforenextpost, value);
			}
		}

		public virtual string s_PostQnA
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PostQnA) ? string.Empty : base.GetsbyteAsString(ColumnNames.PostQnA);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PostQnA);
				else
					this.PostQnA = base.SetsbyteAsString(ColumnNames.PostQnA, value);
			}
		}

		public virtual string s_Language
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Language) ? string.Empty : base.GetstringAsString(ColumnNames.Language);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Language);
				else
					this.Language = base.SetstringAsString(ColumnNames.Language, value);
			}
		}

		public virtual string s_Properties
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Properties) ? string.Empty : base.GetstringAsString(ColumnNames.Properties);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Properties);
				else
					this.Properties = base.SetstringAsString(ColumnNames.Properties, value);
			}
		}

		public virtual string s_ProjectStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProjectStatus) ? string.Empty : base.GetstringAsString(ColumnNames.ProjectStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProjectStatus);
				else
					this.ProjectStatus = base.SetstringAsString(ColumnNames.ProjectStatus, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Id, Parameters.Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProjectName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProjectName, Parameters.ProjectName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Website
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Website, Parameters.Website);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastAccountUsed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastAccountUsed, Parameters.LastAccountUsed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastTopicUsed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastTopicUsed, Parameters.LastTopicUsed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastTemplateUsed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastTemplateUsed, Parameters.LastTemplateUsed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastProxyUsed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastProxyUsed, Parameters.LastProxyUsed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ImacrosCodeGeneric
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ImacrosCodeGeneric, Parameters.ImacrosCodeGeneric);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ImacrosCreateAccCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ImacrosCreateAccCode, Parameters.ImacrosCreateAccCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ImacrosLoginPost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ImacrosLoginPost, Parameters.ImacrosLoginPost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Linkstructure
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Linkstructure, Parameters.Linkstructure);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Senderemail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Senderemail, Parameters.Senderemail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TopicsTable
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TopicsTable, Parameters.TopicsTable);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AnswerTemplate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AnswerTemplate, Parameters.AnswerTemplate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShiftLinkstructureBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShiftLinkstructureBy, Parameters.ShiftLinkstructureBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pausebeforeconfirm
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pausebeforeconfirm, Parameters.Pausebeforeconfirm);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pausebeforenextpost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pausebeforenextpost, Parameters.Pausebeforenextpost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PostQnA
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PostQnA, Parameters.PostQnA);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Language
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Language, Parameters.Language);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Properties
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Properties, Parameters.Properties);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProjectStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProjectStatus, Parameters.ProjectStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public WhereParameter ProjectName
		    {
				get
		        {
					if(_ProjectName_W == null)
	        	    {
						_ProjectName_W = TearOff.ProjectName;
					}
					return _ProjectName_W;
				}
			}

			public WhereParameter Website
		    {
				get
		        {
					if(_Website_W == null)
	        	    {
						_Website_W = TearOff.Website;
					}
					return _Website_W;
				}
			}

			public WhereParameter LastAccountUsed
		    {
				get
		        {
					if(_LastAccountUsed_W == null)
	        	    {
						_LastAccountUsed_W = TearOff.LastAccountUsed;
					}
					return _LastAccountUsed_W;
				}
			}

			public WhereParameter LastTopicUsed
		    {
				get
		        {
					if(_LastTopicUsed_W == null)
	        	    {
						_LastTopicUsed_W = TearOff.LastTopicUsed;
					}
					return _LastTopicUsed_W;
				}
			}

			public WhereParameter LastTemplateUsed
		    {
				get
		        {
					if(_LastTemplateUsed_W == null)
	        	    {
						_LastTemplateUsed_W = TearOff.LastTemplateUsed;
					}
					return _LastTemplateUsed_W;
				}
			}

			public WhereParameter LastProxyUsed
		    {
				get
		        {
					if(_LastProxyUsed_W == null)
	        	    {
						_LastProxyUsed_W = TearOff.LastProxyUsed;
					}
					return _LastProxyUsed_W;
				}
			}

			public WhereParameter ImacrosCodeGeneric
		    {
				get
		        {
					if(_ImacrosCodeGeneric_W == null)
	        	    {
						_ImacrosCodeGeneric_W = TearOff.ImacrosCodeGeneric;
					}
					return _ImacrosCodeGeneric_W;
				}
			}

			public WhereParameter ImacrosCreateAccCode
		    {
				get
		        {
					if(_ImacrosCreateAccCode_W == null)
	        	    {
						_ImacrosCreateAccCode_W = TearOff.ImacrosCreateAccCode;
					}
					return _ImacrosCreateAccCode_W;
				}
			}

			public WhereParameter ImacrosLoginPost
		    {
				get
		        {
					if(_ImacrosLoginPost_W == null)
	        	    {
						_ImacrosLoginPost_W = TearOff.ImacrosLoginPost;
					}
					return _ImacrosLoginPost_W;
				}
			}

			public WhereParameter Linkstructure
		    {
				get
		        {
					if(_Linkstructure_W == null)
	        	    {
						_Linkstructure_W = TearOff.Linkstructure;
					}
					return _Linkstructure_W;
				}
			}

			public WhereParameter Senderemail
		    {
				get
		        {
					if(_Senderemail_W == null)
	        	    {
						_Senderemail_W = TearOff.Senderemail;
					}
					return _Senderemail_W;
				}
			}

			public WhereParameter TopicsTable
		    {
				get
		        {
					if(_TopicsTable_W == null)
	        	    {
						_TopicsTable_W = TearOff.TopicsTable;
					}
					return _TopicsTable_W;
				}
			}

			public WhereParameter AnswerTemplate
		    {
				get
		        {
					if(_AnswerTemplate_W == null)
	        	    {
						_AnswerTemplate_W = TearOff.AnswerTemplate;
					}
					return _AnswerTemplate_W;
				}
			}

			public WhereParameter ShiftLinkstructureBy
		    {
				get
		        {
					if(_ShiftLinkstructureBy_W == null)
	        	    {
						_ShiftLinkstructureBy_W = TearOff.ShiftLinkstructureBy;
					}
					return _ShiftLinkstructureBy_W;
				}
			}

			public WhereParameter Pausebeforeconfirm
		    {
				get
		        {
					if(_Pausebeforeconfirm_W == null)
	        	    {
						_Pausebeforeconfirm_W = TearOff.Pausebeforeconfirm;
					}
					return _Pausebeforeconfirm_W;
				}
			}

			public WhereParameter Pausebeforenextpost
		    {
				get
		        {
					if(_Pausebeforenextpost_W == null)
	        	    {
						_Pausebeforenextpost_W = TearOff.Pausebeforenextpost;
					}
					return _Pausebeforenextpost_W;
				}
			}

			public WhereParameter PostQnA
		    {
				get
		        {
					if(_PostQnA_W == null)
	        	    {
						_PostQnA_W = TearOff.PostQnA;
					}
					return _PostQnA_W;
				}
			}

			public WhereParameter Language
		    {
				get
		        {
					if(_Language_W == null)
	        	    {
						_Language_W = TearOff.Language;
					}
					return _Language_W;
				}
			}

			public WhereParameter Properties
		    {
				get
		        {
					if(_Properties_W == null)
	        	    {
						_Properties_W = TearOff.Properties;
					}
					return _Properties_W;
				}
			}

			public WhereParameter ProjectStatus
		    {
				get
		        {
					if(_ProjectStatus_W == null)
	        	    {
						_ProjectStatus_W = TearOff.ProjectStatus;
					}
					return _ProjectStatus_W;
				}
			}

			private WhereParameter _Id_W = null;
			private WhereParameter _ProjectName_W = null;
			private WhereParameter _Website_W = null;
			private WhereParameter _LastAccountUsed_W = null;
			private WhereParameter _LastTopicUsed_W = null;
			private WhereParameter _LastTemplateUsed_W = null;
			private WhereParameter _LastProxyUsed_W = null;
			private WhereParameter _ImacrosCodeGeneric_W = null;
			private WhereParameter _ImacrosCreateAccCode_W = null;
			private WhereParameter _ImacrosLoginPost_W = null;
			private WhereParameter _Linkstructure_W = null;
			private WhereParameter _Senderemail_W = null;
			private WhereParameter _TopicsTable_W = null;
			private WhereParameter _AnswerTemplate_W = null;
			private WhereParameter _ShiftLinkstructureBy_W = null;
			private WhereParameter _Pausebeforeconfirm_W = null;
			private WhereParameter _Pausebeforenextpost_W = null;
			private WhereParameter _PostQnA_W = null;
			private WhereParameter _Language_W = null;
			private WhereParameter _Properties_W = null;
			private WhereParameter _ProjectStatus_W = null;

			public void WhereClauseReset()
			{
				_Id_W = null;
				_ProjectName_W = null;
				_Website_W = null;
				_LastAccountUsed_W = null;
				_LastTopicUsed_W = null;
				_LastTemplateUsed_W = null;
				_LastProxyUsed_W = null;
				_ImacrosCodeGeneric_W = null;
				_ImacrosCreateAccCode_W = null;
				_ImacrosLoginPost_W = null;
				_Linkstructure_W = null;
				_Senderemail_W = null;
				_TopicsTable_W = null;
				_AnswerTemplate_W = null;
				_ShiftLinkstructureBy_W = null;
				_Pausebeforeconfirm_W = null;
				_Pausebeforenextpost_W = null;
				_PostQnA_W = null;
				_Language_W = null;
				_Properties_W = null;
				_ProjectStatus_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Id, Parameters.Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProjectName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProjectName, Parameters.ProjectName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Website
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Website, Parameters.Website);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastAccountUsed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastAccountUsed, Parameters.LastAccountUsed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastTopicUsed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastTopicUsed, Parameters.LastTopicUsed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastTemplateUsed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastTemplateUsed, Parameters.LastTemplateUsed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastProxyUsed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastProxyUsed, Parameters.LastProxyUsed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ImacrosCodeGeneric
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ImacrosCodeGeneric, Parameters.ImacrosCodeGeneric);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ImacrosCreateAccCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ImacrosCreateAccCode, Parameters.ImacrosCreateAccCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ImacrosLoginPost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ImacrosLoginPost, Parameters.ImacrosLoginPost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Linkstructure
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Linkstructure, Parameters.Linkstructure);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Senderemail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Senderemail, Parameters.Senderemail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TopicsTable
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TopicsTable, Parameters.TopicsTable);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AnswerTemplate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AnswerTemplate, Parameters.AnswerTemplate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShiftLinkstructureBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShiftLinkstructureBy, Parameters.ShiftLinkstructureBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pausebeforeconfirm
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pausebeforeconfirm, Parameters.Pausebeforeconfirm);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pausebeforenextpost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pausebeforenextpost, Parameters.Pausebeforenextpost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PostQnA
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PostQnA, Parameters.PostQnA);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Language
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Language, Parameters.Language);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Properties
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Properties, Parameters.Properties);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProjectStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProjectStatus, Parameters.ProjectStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public AggregateParameter ProjectName
		    {
				get
		        {
					if(_ProjectName_W == null)
	        	    {
						_ProjectName_W = TearOff.ProjectName;
					}
					return _ProjectName_W;
				}
			}

			public AggregateParameter Website
		    {
				get
		        {
					if(_Website_W == null)
	        	    {
						_Website_W = TearOff.Website;
					}
					return _Website_W;
				}
			}

			public AggregateParameter LastAccountUsed
		    {
				get
		        {
					if(_LastAccountUsed_W == null)
	        	    {
						_LastAccountUsed_W = TearOff.LastAccountUsed;
					}
					return _LastAccountUsed_W;
				}
			}

			public AggregateParameter LastTopicUsed
		    {
				get
		        {
					if(_LastTopicUsed_W == null)
	        	    {
						_LastTopicUsed_W = TearOff.LastTopicUsed;
					}
					return _LastTopicUsed_W;
				}
			}

			public AggregateParameter LastTemplateUsed
		    {
				get
		        {
					if(_LastTemplateUsed_W == null)
	        	    {
						_LastTemplateUsed_W = TearOff.LastTemplateUsed;
					}
					return _LastTemplateUsed_W;
				}
			}

			public AggregateParameter LastProxyUsed
		    {
				get
		        {
					if(_LastProxyUsed_W == null)
	        	    {
						_LastProxyUsed_W = TearOff.LastProxyUsed;
					}
					return _LastProxyUsed_W;
				}
			}

			public AggregateParameter ImacrosCodeGeneric
		    {
				get
		        {
					if(_ImacrosCodeGeneric_W == null)
	        	    {
						_ImacrosCodeGeneric_W = TearOff.ImacrosCodeGeneric;
					}
					return _ImacrosCodeGeneric_W;
				}
			}

			public AggregateParameter ImacrosCreateAccCode
		    {
				get
		        {
					if(_ImacrosCreateAccCode_W == null)
	        	    {
						_ImacrosCreateAccCode_W = TearOff.ImacrosCreateAccCode;
					}
					return _ImacrosCreateAccCode_W;
				}
			}

			public AggregateParameter ImacrosLoginPost
		    {
				get
		        {
					if(_ImacrosLoginPost_W == null)
	        	    {
						_ImacrosLoginPost_W = TearOff.ImacrosLoginPost;
					}
					return _ImacrosLoginPost_W;
				}
			}

			public AggregateParameter Linkstructure
		    {
				get
		        {
					if(_Linkstructure_W == null)
	        	    {
						_Linkstructure_W = TearOff.Linkstructure;
					}
					return _Linkstructure_W;
				}
			}

			public AggregateParameter Senderemail
		    {
				get
		        {
					if(_Senderemail_W == null)
	        	    {
						_Senderemail_W = TearOff.Senderemail;
					}
					return _Senderemail_W;
				}
			}

			public AggregateParameter TopicsTable
		    {
				get
		        {
					if(_TopicsTable_W == null)
	        	    {
						_TopicsTable_W = TearOff.TopicsTable;
					}
					return _TopicsTable_W;
				}
			}

			public AggregateParameter AnswerTemplate
		    {
				get
		        {
					if(_AnswerTemplate_W == null)
	        	    {
						_AnswerTemplate_W = TearOff.AnswerTemplate;
					}
					return _AnswerTemplate_W;
				}
			}

			public AggregateParameter ShiftLinkstructureBy
		    {
				get
		        {
					if(_ShiftLinkstructureBy_W == null)
	        	    {
						_ShiftLinkstructureBy_W = TearOff.ShiftLinkstructureBy;
					}
					return _ShiftLinkstructureBy_W;
				}
			}

			public AggregateParameter Pausebeforeconfirm
		    {
				get
		        {
					if(_Pausebeforeconfirm_W == null)
	        	    {
						_Pausebeforeconfirm_W = TearOff.Pausebeforeconfirm;
					}
					return _Pausebeforeconfirm_W;
				}
			}

			public AggregateParameter Pausebeforenextpost
		    {
				get
		        {
					if(_Pausebeforenextpost_W == null)
	        	    {
						_Pausebeforenextpost_W = TearOff.Pausebeforenextpost;
					}
					return _Pausebeforenextpost_W;
				}
			}

			public AggregateParameter PostQnA
		    {
				get
		        {
					if(_PostQnA_W == null)
	        	    {
						_PostQnA_W = TearOff.PostQnA;
					}
					return _PostQnA_W;
				}
			}

			public AggregateParameter Language
		    {
				get
		        {
					if(_Language_W == null)
	        	    {
						_Language_W = TearOff.Language;
					}
					return _Language_W;
				}
			}

			public AggregateParameter Properties
		    {
				get
		        {
					if(_Properties_W == null)
	        	    {
						_Properties_W = TearOff.Properties;
					}
					return _Properties_W;
				}
			}

			public AggregateParameter ProjectStatus
		    {
				get
		        {
					if(_ProjectStatus_W == null)
	        	    {
						_ProjectStatus_W = TearOff.ProjectStatus;
					}
					return _ProjectStatus_W;
				}
			}

			private AggregateParameter _Id_W = null;
			private AggregateParameter _ProjectName_W = null;
			private AggregateParameter _Website_W = null;
			private AggregateParameter _LastAccountUsed_W = null;
			private AggregateParameter _LastTopicUsed_W = null;
			private AggregateParameter _LastTemplateUsed_W = null;
			private AggregateParameter _LastProxyUsed_W = null;
			private AggregateParameter _ImacrosCodeGeneric_W = null;
			private AggregateParameter _ImacrosCreateAccCode_W = null;
			private AggregateParameter _ImacrosLoginPost_W = null;
			private AggregateParameter _Linkstructure_W = null;
			private AggregateParameter _Senderemail_W = null;
			private AggregateParameter _TopicsTable_W = null;
			private AggregateParameter _AnswerTemplate_W = null;
			private AggregateParameter _ShiftLinkstructureBy_W = null;
			private AggregateParameter _Pausebeforeconfirm_W = null;
			private AggregateParameter _Pausebeforenextpost_W = null;
			private AggregateParameter _PostQnA_W = null;
			private AggregateParameter _Language_W = null;
			private AggregateParameter _Properties_W = null;
			private AggregateParameter _ProjectStatus_W = null;

			public void AggregateClauseReset()
			{
				_Id_W = null;
				_ProjectName_W = null;
				_Website_W = null;
				_LastAccountUsed_W = null;
				_LastTopicUsed_W = null;
				_LastTemplateUsed_W = null;
				_LastProxyUsed_W = null;
				_ImacrosCodeGeneric_W = null;
				_ImacrosCreateAccCode_W = null;
				_ImacrosLoginPost_W = null;
				_Linkstructure_W = null;
				_Senderemail_W = null;
				_TopicsTable_W = null;
				_AnswerTemplate_W = null;
				_ShiftLinkstructureBy_W = null;
				_Pausebeforeconfirm_W = null;
				_Pausebeforenextpost_W = null;
				_PostQnA_W = null;
				_Language_W = null;
				_Properties_W = null;
				_ProjectStatus_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
			
		
		protected override IDbCommand GetInsertCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"INSERT INTO `projects`
			(
				`ProjectName`,
				`Website`,
				`LastAccountUsed`,
				`LastTopicUsed`,
				`LastTemplateUsed`,
				`LastProxyUsed`,
				`ImacrosCodeGeneric`,
				`ImacrosCreateAccCode`,
				`ImacrosLoginPost`,
				`Linkstructure`,
				`Senderemail`,
				`TopicsTable`,
				`AnswerTemplate`,
				`ShiftLinkstructureBy`,
				`Pausebeforeconfirm`,
				`Pausebeforenextpost`,
				`PostQnA`,
				`Language`,
				`Properties`,
				`ProjectStatus`
			)
			VALUES
			(
				?ProjectName,
				?Website,
				?LastAccountUsed,
				?LastTopicUsed,
				?LastTemplateUsed,
				?LastProxyUsed,
				?ImacrosCodeGeneric,
				?ImacrosCreateAccCode,
				?ImacrosLoginPost,
				?Linkstructure,
				?Senderemail,
				?TopicsTable,
				?AnswerTemplate,
				?ShiftLinkstructureBy,
				?Pausebeforeconfirm,
				?Pausebeforenextpost,
				?PostQnA,
				?Language,
				?Properties,
				?ProjectStatus
			)";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText = 
			@"UPDATE `projects` SET 
				`ProjectName`=?ProjectName,
				`Website`=?Website,
				`LastAccountUsed`=?LastAccountUsed,
				`LastTopicUsed`=?LastTopicUsed,
				`LastTemplateUsed`=?LastTemplateUsed,
				`LastProxyUsed`=?LastProxyUsed,
				`ImacrosCodeGeneric`=?ImacrosCodeGeneric,
				`ImacrosCreateAccCode`=?ImacrosCreateAccCode,
				`ImacrosLoginPost`=?ImacrosLoginPost,
				`Linkstructure`=?Linkstructure,
				`Senderemail`=?Senderemail,
				`TopicsTable`=?TopicsTable,
				`AnswerTemplate`=?AnswerTemplate,
				`ShiftLinkstructureBy`=?ShiftLinkstructureBy,
				`Pausebeforeconfirm`=?Pausebeforeconfirm,
				`Pausebeforenextpost`=?Pausebeforenextpost,
				`PostQnA`=?PostQnA,
				`Language`=?Language,
				`Properties`=?Properties,
				`ProjectStatus`=?ProjectStatus
			WHERE
				`Id`=?Id";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"DELETE FROM `projects` 
			WHERE
				`Id`=?Id";

	
			MySqlParameter p;
			p = cmd.Parameters.Add(Parameters.Id);
			p.SourceColumn = ColumnNames.Id;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(MySqlCommand cmd)
		{
			MySqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Id);
			p.SourceColumn = ColumnNames.Id;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProjectName);
			p.SourceColumn = ColumnNames.ProjectName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Website);
			p.SourceColumn = ColumnNames.Website;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastAccountUsed);
			p.SourceColumn = ColumnNames.LastAccountUsed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastTopicUsed);
			p.SourceColumn = ColumnNames.LastTopicUsed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastTemplateUsed);
			p.SourceColumn = ColumnNames.LastTemplateUsed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastProxyUsed);
			p.SourceColumn = ColumnNames.LastProxyUsed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ImacrosCodeGeneric);
			p.SourceColumn = ColumnNames.ImacrosCodeGeneric;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ImacrosCreateAccCode);
			p.SourceColumn = ColumnNames.ImacrosCreateAccCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ImacrosLoginPost);
			p.SourceColumn = ColumnNames.ImacrosLoginPost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Linkstructure);
			p.SourceColumn = ColumnNames.Linkstructure;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Senderemail);
			p.SourceColumn = ColumnNames.Senderemail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TopicsTable);
			p.SourceColumn = ColumnNames.TopicsTable;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AnswerTemplate);
			p.SourceColumn = ColumnNames.AnswerTemplate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShiftLinkstructureBy);
			p.SourceColumn = ColumnNames.ShiftLinkstructureBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Pausebeforeconfirm);
			p.SourceColumn = ColumnNames.Pausebeforeconfirm;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Pausebeforenextpost);
			p.SourceColumn = ColumnNames.Pausebeforenextpost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PostQnA);
			p.SourceColumn = ColumnNames.PostQnA;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Language);
			p.SourceColumn = ColumnNames.Language;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Properties);
			p.SourceColumn = ColumnNames.Properties;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProjectStatus);
			p.SourceColumn = ColumnNames.ProjectStatus;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}		
		
	
	}
}


/*
'===============================================================================
'  Generated From - MySQL4_CSharp_BusinessEntity.vbgen
'
'  The supporting base class MySql4Entity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace iMacrosPostingDashboard
{
	public abstract class _topicsgeneric : MySql4Entity
	{
		public _topicsgeneric()
		{
			this.QuerySource = "";
			this.MappingName = "";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		public override string GetAutoKeyColumns()
		{
			return "Id";
		}
		

		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return this.Query.Load();
		}
	
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Id)
		{
			this.Where.Id.Value = Id;
			
			return this.Query.Load();
		}
		
		
		#region Parameters
		protected class Parameters
		{
			
			public static MySqlParameter Id
			{
				get
				{
					return new MySqlParameter("?Id", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter Link
			{
				get
				{
					return new MySqlParameter("?Link", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter Topic
			{
				get
				{
					return new MySqlParameter("?Topic", MySqlDbType.Blob);

				}
			}
			
			public static MySqlParameter TopicTranslated
			{
				get
				{
					return new MySqlParameter("?TopicTranslated", MySqlDbType.Blob);

				}
			}
			
			public static MySqlParameter PostingTime
			{
				get
				{
					return new MySqlParameter("?PostingTime", MySqlDbType.DateTime);

				}
			}
			
			public static MySqlParameter PostedStatus
			{
				get
				{
					return new MySqlParameter("?PostedStatus", MySqlDbType.Byte);

				}
			}
			
			public static MySqlParameter PostURLexact
			{
				get
				{
					return new MySqlParameter("?PostURLexact", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter ProductKeyword
			{
				get
				{
					return new MySqlParameter("?ProductKeyword", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter LongURL1
			{
				get
				{
					return new MySqlParameter("?LongURL1", MySqlDbType.Blob);

				}
			}
			
			public static MySqlParameter LongURL2
			{
				get
				{
					return new MySqlParameter("?LongURL2", MySqlDbType.Blob);

				}
			}
			
			public static MySqlParameter ShortURL1
			{
				get
				{
					return new MySqlParameter("?ShortURL1", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter ShortURL2
			{
				get
				{
					return new MySqlParameter("?ShortURL2", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter Response
			{
				get
				{
					return new MySqlParameter("?Response", MySqlDbType.Text);

				}
			}
			
			public static MySqlParameter CustResponse
			{
				get
				{
					return new MySqlParameter("?CustResponse", MySqlDbType.Blob);

				}
			}
			
			public static MySqlParameter AffprogramId1
			{
				get
				{
					return new MySqlParameter("?AffprogramId1", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter AffprogramId2
			{
				get
				{
					return new MySqlParameter("?AffprogramId2", MySqlDbType.Int32);

				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Id = "Id";
            public const string Link = "Link";
            public const string Topic = "Topic";
            public const string TopicTranslated = "TopicTranslated";
            public const string PostingTime = "PostingTime";
            public const string PostedStatus = "PostedStatus";
            public const string PostURLexact = "PostURLexact";
            public const string ProductKeyword = "ProductKeyword";
            public const string LongURL1 = "LongURL1";
            public const string LongURL2 = "LongURL2";
            public const string ShortURL1 = "ShortURL1";
            public const string ShortURL2 = "ShortURL2";
            public const string Response = "Response";
            public const string CustResponse = "CustResponse";
            public const string AffprogramId1 = "AffprogramId1";
            public const string AffprogramId2 = "AffprogramId2";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Id] = _topicsgeneric.PropertyNames.Id;
					ht[Link] = _topicsgeneric.PropertyNames.Link;
					ht[Topic] = _topicsgeneric.PropertyNames.Topic;
					ht[TopicTranslated] = _topicsgeneric.PropertyNames.TopicTranslated;
					ht[PostingTime] = _topicsgeneric.PropertyNames.PostingTime;
					ht[PostedStatus] = _topicsgeneric.PropertyNames.PostedStatus;
					ht[PostURLexact] = _topicsgeneric.PropertyNames.PostURLexact;
					ht[ProductKeyword] = _topicsgeneric.PropertyNames.ProductKeyword;
					ht[LongURL1] = _topicsgeneric.PropertyNames.LongURL1;
					ht[LongURL2] = _topicsgeneric.PropertyNames.LongURL2;
					ht[ShortURL1] = _topicsgeneric.PropertyNames.ShortURL1;
					ht[ShortURL2] = _topicsgeneric.PropertyNames.ShortURL2;
					ht[Response] = _topicsgeneric.PropertyNames.Response;
					ht[CustResponse] = _topicsgeneric.PropertyNames.CustResponse;
					ht[AffprogramId1] = _topicsgeneric.PropertyNames.AffprogramId1;
					ht[AffprogramId2] = _topicsgeneric.PropertyNames.AffprogramId2;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Id = "Id";
            public const string Link = "Link";
            public const string Topic = "Topic";
            public const string TopicTranslated = "TopicTranslated";
            public const string PostingTime = "PostingTime";
            public const string PostedStatus = "PostedStatus";
            public const string PostURLexact = "PostURLexact";
            public const string ProductKeyword = "ProductKeyword";
            public const string LongURL1 = "LongURL1";
            public const string LongURL2 = "LongURL2";
            public const string ShortURL1 = "ShortURL1";
            public const string ShortURL2 = "ShortURL2";
            public const string Response = "Response";
            public const string CustResponse = "CustResponse";
            public const string AffprogramId1 = "AffprogramId1";
            public const string AffprogramId2 = "AffprogramId2";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Id] = _topicsgeneric.ColumnNames.Id;
					ht[Link] = _topicsgeneric.ColumnNames.Link;
					ht[Topic] = _topicsgeneric.ColumnNames.Topic;
					ht[TopicTranslated] = _topicsgeneric.ColumnNames.TopicTranslated;
					ht[PostingTime] = _topicsgeneric.ColumnNames.PostingTime;
					ht[PostedStatus] = _topicsgeneric.ColumnNames.PostedStatus;
					ht[PostURLexact] = _topicsgeneric.ColumnNames.PostURLexact;
					ht[ProductKeyword] = _topicsgeneric.ColumnNames.ProductKeyword;
					ht[LongURL1] = _topicsgeneric.ColumnNames.LongURL1;
					ht[LongURL2] = _topicsgeneric.ColumnNames.LongURL2;
					ht[ShortURL1] = _topicsgeneric.ColumnNames.ShortURL1;
					ht[ShortURL2] = _topicsgeneric.ColumnNames.ShortURL2;
					ht[Response] = _topicsgeneric.ColumnNames.Response;
					ht[CustResponse] = _topicsgeneric.ColumnNames.CustResponse;
					ht[AffprogramId1] = _topicsgeneric.ColumnNames.AffprogramId1;
					ht[AffprogramId2] = _topicsgeneric.ColumnNames.AffprogramId2;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Id = "s_Id";
            public const string Link = "s_Link";
            public const string Topic = "s_Topic";
            public const string TopicTranslated = "s_TopicTranslated";
            public const string PostingTime = "s_PostingTime";
            public const string PostedStatus = "s_PostedStatus";
            public const string PostURLexact = "s_PostURLexact";
            public const string ProductKeyword = "s_ProductKeyword";
            public const string LongURL1 = "s_LongURL1";
            public const string LongURL2 = "s_LongURL2";
            public const string ShortURL1 = "s_ShortURL1";
            public const string ShortURL2 = "s_ShortURL2";
            public const string Response = "s_Response";
            public const string CustResponse = "s_CustResponse";
            public const string AffprogramId1 = "s_AffprogramId1";
            public const string AffprogramId2 = "s_AffprogramId2";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Id);
			}
			set
	        {
				base.Setint(ColumnNames.Id, value);
			}
		}

		public virtual string Link
	    {
			get
	        {
				return base.Getstring(ColumnNames.Link);
			}
			set
	        {
				base.Setstring(ColumnNames.Link, value);
			}
		}

		public virtual string Topic
	    {
			get
	        {
				return base.Getstring(ColumnNames.Topic);
			}
			set
	        {
				base.Setstring(ColumnNames.Topic, value);
			}
		}

		public virtual string TopicTranslated
	    {
			get
	        {
				return base.Getstring(ColumnNames.TopicTranslated);
			}
			set
	        {
				base.Setstring(ColumnNames.TopicTranslated, value);
			}
		}

		public virtual DateTime PostingTime
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.PostingTime);
			}
			set
	        {
				base.SetDateTime(ColumnNames.PostingTime, value);
			}
		}

		public virtual sbyte PostedStatus
	    {
			get
	        {
				return base.Getsbyte(ColumnNames.PostedStatus);
			}
			set
	        {
				base.Setsbyte(ColumnNames.PostedStatus, value);
			}
		}

		public virtual string PostURLexact
	    {
			get
	        {
				return base.Getstring(ColumnNames.PostURLexact);
			}
			set
	        {
				base.Setstring(ColumnNames.PostURLexact, value);
			}
		}

		public virtual string ProductKeyword
	    {
			get
	        {
				return base.Getstring(ColumnNames.ProductKeyword);
			}
			set
	        {
				base.Setstring(ColumnNames.ProductKeyword, value);
			}
		}

		public virtual string LongURL1
	    {
			get
	        {
				return base.Getstring(ColumnNames.LongURL1);
			}
			set
	        {
				base.Setstring(ColumnNames.LongURL1, value);
			}
		}

		public virtual string LongURL2
	    {
			get
	        {
				return base.Getstring(ColumnNames.LongURL2);
			}
			set
	        {
				base.Setstring(ColumnNames.LongURL2, value);
			}
		}

		public virtual string ShortURL1
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShortURL1);
			}
			set
	        {
				base.Setstring(ColumnNames.ShortURL1, value);
			}
		}

		public virtual string ShortURL2
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShortURL2);
			}
			set
	        {
				base.Setstring(ColumnNames.ShortURL2, value);
			}
		}

		public virtual string Response
	    {
			get
	        {
				return base.Getstring(ColumnNames.Response);
			}
			set
	        {
				base.Setstring(ColumnNames.Response, value);
			}
		}

		public virtual string CustResponse
	    {
			get
	        {
				return base.Getstring(ColumnNames.CustResponse);
			}
			set
	        {
				base.Setstring(ColumnNames.CustResponse, value);
			}
		}

		public virtual int AffprogramId1
	    {
			get
	        {
				return base.Getint(ColumnNames.AffprogramId1);
			}
			set
	        {
				base.Setint(ColumnNames.AffprogramId1, value);
			}
		}

		public virtual int AffprogramId2
	    {
			get
	        {
				return base.Getint(ColumnNames.AffprogramId2);
			}
			set
	        {
				base.Setint(ColumnNames.AffprogramId2, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Id) ? string.Empty : base.GetintAsString(ColumnNames.Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Id);
				else
					this.Id = base.SetintAsString(ColumnNames.Id, value);
			}
		}

		public virtual string s_Link
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Link) ? string.Empty : base.GetstringAsString(ColumnNames.Link);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Link);
				else
					this.Link = base.SetstringAsString(ColumnNames.Link, value);
			}
		}

		public virtual string s_Topic
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Topic) ? string.Empty : base.GetstringAsString(ColumnNames.Topic);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Topic);
				else
					this.Topic = base.SetstringAsString(ColumnNames.Topic, value);
			}
		}

		public virtual string s_TopicTranslated
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TopicTranslated) ? string.Empty : base.GetstringAsString(ColumnNames.TopicTranslated);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TopicTranslated);
				else
					this.TopicTranslated = base.SetstringAsString(ColumnNames.TopicTranslated, value);
			}
		}

		public virtual string s_PostingTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PostingTime) ? string.Empty : base.GetDateTimeAsString(ColumnNames.PostingTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PostingTime);
				else
					this.PostingTime = base.SetDateTimeAsString(ColumnNames.PostingTime, value);
			}
		}

		public virtual string s_PostedStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PostedStatus) ? string.Empty : base.GetsbyteAsString(ColumnNames.PostedStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PostedStatus);
				else
					this.PostedStatus = base.SetsbyteAsString(ColumnNames.PostedStatus, value);
			}
		}

		public virtual string s_PostURLexact
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PostURLexact) ? string.Empty : base.GetstringAsString(ColumnNames.PostURLexact);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PostURLexact);
				else
					this.PostURLexact = base.SetstringAsString(ColumnNames.PostURLexact, value);
			}
		}

		public virtual string s_ProductKeyword
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProductKeyword) ? string.Empty : base.GetstringAsString(ColumnNames.ProductKeyword);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProductKeyword);
				else
					this.ProductKeyword = base.SetstringAsString(ColumnNames.ProductKeyword, value);
			}
		}

		public virtual string s_LongURL1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LongURL1) ? string.Empty : base.GetstringAsString(ColumnNames.LongURL1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LongURL1);
				else
					this.LongURL1 = base.SetstringAsString(ColumnNames.LongURL1, value);
			}
		}

		public virtual string s_LongURL2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LongURL2) ? string.Empty : base.GetstringAsString(ColumnNames.LongURL2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LongURL2);
				else
					this.LongURL2 = base.SetstringAsString(ColumnNames.LongURL2, value);
			}
		}

		public virtual string s_ShortURL1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShortURL1) ? string.Empty : base.GetstringAsString(ColumnNames.ShortURL1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShortURL1);
				else
					this.ShortURL1 = base.SetstringAsString(ColumnNames.ShortURL1, value);
			}
		}

		public virtual string s_ShortURL2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShortURL2) ? string.Empty : base.GetstringAsString(ColumnNames.ShortURL2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShortURL2);
				else
					this.ShortURL2 = base.SetstringAsString(ColumnNames.ShortURL2, value);
			}
		}

		public virtual string s_Response
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Response) ? string.Empty : base.GetstringAsString(ColumnNames.Response);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Response);
				else
					this.Response = base.SetstringAsString(ColumnNames.Response, value);
			}
		}

		public virtual string s_CustResponse
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CustResponse) ? string.Empty : base.GetstringAsString(ColumnNames.CustResponse);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CustResponse);
				else
					this.CustResponse = base.SetstringAsString(ColumnNames.CustResponse, value);
			}
		}

		public virtual string s_AffprogramId1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AffprogramId1) ? string.Empty : base.GetintAsString(ColumnNames.AffprogramId1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AffprogramId1);
				else
					this.AffprogramId1 = base.SetintAsString(ColumnNames.AffprogramId1, value);
			}
		}

		public virtual string s_AffprogramId2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AffprogramId2) ? string.Empty : base.GetintAsString(ColumnNames.AffprogramId2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AffprogramId2);
				else
					this.AffprogramId2 = base.SetintAsString(ColumnNames.AffprogramId2, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Id, Parameters.Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Link
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Link, Parameters.Link);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Topic
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Topic, Parameters.Topic);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TopicTranslated
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TopicTranslated, Parameters.TopicTranslated);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PostingTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PostingTime, Parameters.PostingTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PostedStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PostedStatus, Parameters.PostedStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PostURLexact
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PostURLexact, Parameters.PostURLexact);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProductKeyword
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProductKeyword, Parameters.ProductKeyword);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LongURL1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LongURL1, Parameters.LongURL1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LongURL2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LongURL2, Parameters.LongURL2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShortURL1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShortURL1, Parameters.ShortURL1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShortURL2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShortURL2, Parameters.ShortURL2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Response
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Response, Parameters.Response);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CustResponse
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CustResponse, Parameters.CustResponse);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AffprogramId1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AffprogramId1, Parameters.AffprogramId1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AffprogramId2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AffprogramId2, Parameters.AffprogramId2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public WhereParameter Link
		    {
				get
		        {
					if(_Link_W == null)
	        	    {
						_Link_W = TearOff.Link;
					}
					return _Link_W;
				}
			}

			public WhereParameter Topic
		    {
				get
		        {
					if(_Topic_W == null)
	        	    {
						_Topic_W = TearOff.Topic;
					}
					return _Topic_W;
				}
			}

			public WhereParameter TopicTranslated
		    {
				get
		        {
					if(_TopicTranslated_W == null)
	        	    {
						_TopicTranslated_W = TearOff.TopicTranslated;
					}
					return _TopicTranslated_W;
				}
			}

			public WhereParameter PostingTime
		    {
				get
		        {
					if(_PostingTime_W == null)
	        	    {
						_PostingTime_W = TearOff.PostingTime;
					}
					return _PostingTime_W;
				}
			}

			public WhereParameter PostedStatus
		    {
				get
		        {
					if(_PostedStatus_W == null)
	        	    {
						_PostedStatus_W = TearOff.PostedStatus;
					}
					return _PostedStatus_W;
				}
			}

			public WhereParameter PostURLexact
		    {
				get
		        {
					if(_PostURLexact_W == null)
	        	    {
						_PostURLexact_W = TearOff.PostURLexact;
					}
					return _PostURLexact_W;
				}
			}

			public WhereParameter ProductKeyword
		    {
				get
		        {
					if(_ProductKeyword_W == null)
	        	    {
						_ProductKeyword_W = TearOff.ProductKeyword;
					}
					return _ProductKeyword_W;
				}
			}

			public WhereParameter LongURL1
		    {
				get
		        {
					if(_LongURL1_W == null)
	        	    {
						_LongURL1_W = TearOff.LongURL1;
					}
					return _LongURL1_W;
				}
			}

			public WhereParameter LongURL2
		    {
				get
		        {
					if(_LongURL2_W == null)
	        	    {
						_LongURL2_W = TearOff.LongURL2;
					}
					return _LongURL2_W;
				}
			}

			public WhereParameter ShortURL1
		    {
				get
		        {
					if(_ShortURL1_W == null)
	        	    {
						_ShortURL1_W = TearOff.ShortURL1;
					}
					return _ShortURL1_W;
				}
			}

			public WhereParameter ShortURL2
		    {
				get
		        {
					if(_ShortURL2_W == null)
	        	    {
						_ShortURL2_W = TearOff.ShortURL2;
					}
					return _ShortURL2_W;
				}
			}

			public WhereParameter Response
		    {
				get
		        {
					if(_Response_W == null)
	        	    {
						_Response_W = TearOff.Response;
					}
					return _Response_W;
				}
			}

			public WhereParameter CustResponse
		    {
				get
		        {
					if(_CustResponse_W == null)
	        	    {
						_CustResponse_W = TearOff.CustResponse;
					}
					return _CustResponse_W;
				}
			}

			public WhereParameter AffprogramId1
		    {
				get
		        {
					if(_AffprogramId1_W == null)
	        	    {
						_AffprogramId1_W = TearOff.AffprogramId1;
					}
					return _AffprogramId1_W;
				}
			}

			public WhereParameter AffprogramId2
		    {
				get
		        {
					if(_AffprogramId2_W == null)
	        	    {
						_AffprogramId2_W = TearOff.AffprogramId2;
					}
					return _AffprogramId2_W;
				}
			}

			private WhereParameter _Id_W = null;
			private WhereParameter _Link_W = null;
			private WhereParameter _Topic_W = null;
			private WhereParameter _TopicTranslated_W = null;
			private WhereParameter _PostingTime_W = null;
			private WhereParameter _PostedStatus_W = null;
			private WhereParameter _PostURLexact_W = null;
			private WhereParameter _ProductKeyword_W = null;
			private WhereParameter _LongURL1_W = null;
			private WhereParameter _LongURL2_W = null;
			private WhereParameter _ShortURL1_W = null;
			private WhereParameter _ShortURL2_W = null;
			private WhereParameter _Response_W = null;
			private WhereParameter _CustResponse_W = null;
			private WhereParameter _AffprogramId1_W = null;
			private WhereParameter _AffprogramId2_W = null;

			public void WhereClauseReset()
			{
				_Id_W = null;
				_Link_W = null;
				_Topic_W = null;
				_TopicTranslated_W = null;
				_PostingTime_W = null;
				_PostedStatus_W = null;
				_PostURLexact_W = null;
				_ProductKeyword_W = null;
				_LongURL1_W = null;
				_LongURL2_W = null;
				_ShortURL1_W = null;
				_ShortURL2_W = null;
				_Response_W = null;
				_CustResponse_W = null;
				_AffprogramId1_W = null;
				_AffprogramId2_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Id, Parameters.Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Link
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Link, Parameters.Link);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Topic
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Topic, Parameters.Topic);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TopicTranslated
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TopicTranslated, Parameters.TopicTranslated);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PostingTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PostingTime, Parameters.PostingTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PostedStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PostedStatus, Parameters.PostedStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PostURLexact
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PostURLexact, Parameters.PostURLexact);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProductKeyword
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProductKeyword, Parameters.ProductKeyword);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LongURL1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LongURL1, Parameters.LongURL1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LongURL2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LongURL2, Parameters.LongURL2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShortURL1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShortURL1, Parameters.ShortURL1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShortURL2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShortURL2, Parameters.ShortURL2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Response
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Response, Parameters.Response);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CustResponse
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CustResponse, Parameters.CustResponse);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AffprogramId1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AffprogramId1, Parameters.AffprogramId1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AffprogramId2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AffprogramId2, Parameters.AffprogramId2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Id
		    {
				get
		        {
					if(_Id_W == null)
	        	    {
						_Id_W = TearOff.Id;
					}
					return _Id_W;
				}
			}

			public AggregateParameter Link
		    {
				get
		        {
					if(_Link_W == null)
	        	    {
						_Link_W = TearOff.Link;
					}
					return _Link_W;
				}
			}

			public AggregateParameter Topic
		    {
				get
		        {
					if(_Topic_W == null)
	        	    {
						_Topic_W = TearOff.Topic;
					}
					return _Topic_W;
				}
			}

			public AggregateParameter TopicTranslated
		    {
				get
		        {
					if(_TopicTranslated_W == null)
	        	    {
						_TopicTranslated_W = TearOff.TopicTranslated;
					}
					return _TopicTranslated_W;
				}
			}

			public AggregateParameter PostingTime
		    {
				get
		        {
					if(_PostingTime_W == null)
	        	    {
						_PostingTime_W = TearOff.PostingTime;
					}
					return _PostingTime_W;
				}
			}

			public AggregateParameter PostedStatus
		    {
				get
		        {
					if(_PostedStatus_W == null)
	        	    {
						_PostedStatus_W = TearOff.PostedStatus;
					}
					return _PostedStatus_W;
				}
			}

			public AggregateParameter PostURLexact
		    {
				get
		        {
					if(_PostURLexact_W == null)
	        	    {
						_PostURLexact_W = TearOff.PostURLexact;
					}
					return _PostURLexact_W;
				}
			}

			public AggregateParameter ProductKeyword
		    {
				get
		        {
					if(_ProductKeyword_W == null)
	        	    {
						_ProductKeyword_W = TearOff.ProductKeyword;
					}
					return _ProductKeyword_W;
				}
			}

			public AggregateParameter LongURL1
		    {
				get
		        {
					if(_LongURL1_W == null)
	        	    {
						_LongURL1_W = TearOff.LongURL1;
					}
					return _LongURL1_W;
				}
			}

			public AggregateParameter LongURL2
		    {
				get
		        {
					if(_LongURL2_W == null)
	        	    {
						_LongURL2_W = TearOff.LongURL2;
					}
					return _LongURL2_W;
				}
			}

			public AggregateParameter ShortURL1
		    {
				get
		        {
					if(_ShortURL1_W == null)
	        	    {
						_ShortURL1_W = TearOff.ShortURL1;
					}
					return _ShortURL1_W;
				}
			}

			public AggregateParameter ShortURL2
		    {
				get
		        {
					if(_ShortURL2_W == null)
	        	    {
						_ShortURL2_W = TearOff.ShortURL2;
					}
					return _ShortURL2_W;
				}
			}

			public AggregateParameter Response
		    {
				get
		        {
					if(_Response_W == null)
	        	    {
						_Response_W = TearOff.Response;
					}
					return _Response_W;
				}
			}

			public AggregateParameter CustResponse
		    {
				get
		        {
					if(_CustResponse_W == null)
	        	    {
						_CustResponse_W = TearOff.CustResponse;
					}
					return _CustResponse_W;
				}
			}

			public AggregateParameter AffprogramId1
		    {
				get
		        {
					if(_AffprogramId1_W == null)
	        	    {
						_AffprogramId1_W = TearOff.AffprogramId1;
					}
					return _AffprogramId1_W;
				}
			}

			public AggregateParameter AffprogramId2
		    {
				get
		        {
					if(_AffprogramId2_W == null)
	        	    {
						_AffprogramId2_W = TearOff.AffprogramId2;
					}
					return _AffprogramId2_W;
				}
			}

			private AggregateParameter _Id_W = null;
			private AggregateParameter _Link_W = null;
			private AggregateParameter _Topic_W = null;
			private AggregateParameter _TopicTranslated_W = null;
			private AggregateParameter _PostingTime_W = null;
			private AggregateParameter _PostedStatus_W = null;
			private AggregateParameter _PostURLexact_W = null;
			private AggregateParameter _ProductKeyword_W = null;
			private AggregateParameter _LongURL1_W = null;
			private AggregateParameter _LongURL2_W = null;
			private AggregateParameter _ShortURL1_W = null;
			private AggregateParameter _ShortURL2_W = null;
			private AggregateParameter _Response_W = null;
			private AggregateParameter _CustResponse_W = null;
			private AggregateParameter _AffprogramId1_W = null;
			private AggregateParameter _AffprogramId2_W = null;

			public void AggregateClauseReset()
			{
				_Id_W = null;
				_Link_W = null;
				_Topic_W = null;
				_TopicTranslated_W = null;
				_PostingTime_W = null;
				_PostedStatus_W = null;
				_PostURLexact_W = null;
				_ProductKeyword_W = null;
				_LongURL1_W = null;
				_LongURL2_W = null;
				_ShortURL1_W = null;
				_ShortURL2_W = null;
				_Response_W = null;
				_CustResponse_W = null;
				_AffprogramId1_W = null;
				_AffprogramId2_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
			
		
		protected override IDbCommand GetInsertCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"INSERT INTO `" + this.MappingName + @"`
			(
				`Link`,
				`Topic`,
				`TopicTranslated`,
				`PostingTime`,
				`PostedStatus`,
				`PostURLexact`,
				`ProductKeyword`,
				`LongURL1`,
				`LongURL2`,
				`ShortURL1`,
				`ShortURL2`,
				`Response`,
				`CustResponse`,
				`AffprogramId1`,
				`AffprogramId2`
			)
			VALUES
			(
				?Link,
				?Topic,
				?TopicTranslated,
				?PostingTime,
				?PostedStatus,
				?PostURLexact,
				?ProductKeyword,
				?LongURL1,
				?LongURL2,
				?ShortURL1,
				?ShortURL2,
				?Response,
				?CustResponse,
				?AffprogramId1,
				?AffprogramId2
			)";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText = 
			@"UPDATE `" + this.MappingName + @"` SET 
				`Link`=?Link,
				`Topic`=?Topic,
				`TopicTranslated`=?TopicTranslated,
				`PostingTime`=?PostingTime,
				`PostedStatus`=?PostedStatus,
				`PostURLexact`=?PostURLexact,
				`ProductKeyword`=?ProductKeyword,
				`LongURL1`=?LongURL1,
				`LongURL2`=?LongURL2,
				`ShortURL1`=?ShortURL1,
				`ShortURL2`=?ShortURL2,
				`Response`=?Response,
				`CustResponse`=?CustResponse,
				`AffprogramId1`=?AffprogramId1,
				`AffprogramId2`=?AffprogramId2
			WHERE
				`Id`=?Id";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"DELETE FROM `" + this.MappingName + @"` 
			WHERE
				`Id`=?Id";

	
			MySqlParameter p;
			p = cmd.Parameters.Add(Parameters.Id);
			p.SourceColumn = ColumnNames.Id;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(MySqlCommand cmd)
		{
			MySqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Id);
			p.SourceColumn = ColumnNames.Id;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Link);
			p.SourceColumn = ColumnNames.Link;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Topic);
			p.SourceColumn = ColumnNames.Topic;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TopicTranslated);
			p.SourceColumn = ColumnNames.TopicTranslated;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PostingTime);
			p.SourceColumn = ColumnNames.PostingTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PostedStatus);
			p.SourceColumn = ColumnNames.PostedStatus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PostURLexact);
			p.SourceColumn = ColumnNames.PostURLexact;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProductKeyword);
			p.SourceColumn = ColumnNames.ProductKeyword;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LongURL1);
			p.SourceColumn = ColumnNames.LongURL1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LongURL2);
			p.SourceColumn = ColumnNames.LongURL2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShortURL1);
			p.SourceColumn = ColumnNames.ShortURL1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShortURL2);
			p.SourceColumn = ColumnNames.ShortURL2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Response);
			p.SourceColumn = ColumnNames.Response;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CustResponse);
			p.SourceColumn = ColumnNames.CustResponse;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AffprogramId1);
			p.SourceColumn = ColumnNames.AffprogramId1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AffprogramId2);
			p.SourceColumn = ColumnNames.AffprogramId2;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}		
		
	
	}
}
